// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod axelar_solana_memo_program {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, counter_pda_bump: u8) -> Result<()> {
        Ok(())
    }

    pub fn process_memo(ctx: Context<ProcessMemo>, memo: String) -> Result<()> {
        Ok(())
    }

    pub fn send_to_gateway(
        ctx: Context<SendToGateway>,
        memo: String,
        destination_chain: String,
        destination_address: String,
    ) -> Result<()> {
        Ok(())
    }

    pub fn send_to_gateway_offchain_memo(
        ctx: Context<SendToGatewayOffchainMemo>,
        memo_hash: [u8; 32],
        destination_chain: String,
        destination_address: String,
    ) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(mut)]
    payer: AccountInfo<'info>,
    #[account(mut)]
    counter_pda: AccountInfo<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct ProcessMemo<'info> {
    #[account(mut)]
    counter_pda: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SendToGateway<'info> {
    ID: AccountInfo<'info>,
    #[account(mut)]
    memo_counter_pda: AccountInfo<'info>,
    signing_pda_0: AccountInfo<'info>,
    gateway_root_pda: AccountInfo<'info>,
    gateway_program: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SendToGatewayOffchainMemo<'info> {
    ID: AccountInfo<'info>,
    #[account(mut)]
    memo_counter_pda: AccountInfo<'info>,
    signing_pda_0: AccountInfo<'info>,
    gateway_root_pda: AccountInfo<'info>,
    gateway_program: AccountInfo<'info>,
}

#[account]
pub struct Counter {
    /// the counter of how many memos have been received from the gateway
    pub counter: u64,
    /// Bump for the counter PDA
    pub bump: u8,
}
